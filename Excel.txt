public interface IFileCache
{
    string GetFileData(string filePath); // Retrieve file data, potentially from cache
    void ResetCache(string filePath); // Reset the cache for a specific file
}

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Caching;

public class FileCache : IFileCache
{
    private readonly MemoryCache _cache;
    private readonly Dictionary<string, FileSystemWatcher> _watchers; // Keep track of file watchers for each file

    public FileCache()
    {
        _cache = new MemoryCache("FileDataCache");
        _watchers = new Dictionary<string, FileSystemWatcher>();
    }

    private void AddFileWatcher(string filePath)
    {
        // If a watcher for this file already exists, do nothing
        if (_watchers.ContainsKey(filePath))
            return;

        var fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(filePath))
        {
            Filter = Path.GetFileName(filePath),
            NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName
        };

        fileWatcher.Changed += (sender, e) => ResetCache(filePath);
        fileWatcher.Deleted += (sender, e) => ResetCache(filePath);
        fileWatcher.Renamed += (sender, e) => ResetCache(filePath);
        fileWatcher.EnableRaisingEvents = true;

        _watchers[filePath] = fileWatcher; // Store the watcher for future reference
    }

    public void ResetCache(string filePath)
    {
        _cache.Remove(filePath);
        Console.WriteLine($"Cache reset for: {filePath}");
    }

    public string GetFileData(string filePath)
    {
        if (_cache.Contains(filePath))
        {
            return _cache.Get(filePath) as string;
        }

        // Add a new watcher if this is the first time we are accessing this file
        AddFileWatcher(filePath);

        // If the data is not cached, read from the file and cache it
        string data = File.ReadAllText(filePath);
        _cache.Set(filePath, data, new CacheItemPolicy());
        return data;
    }
}

class Program
{
    static void Main()
    {
        IFileCache fileCache = new FileCache();

        // Retrieve file data for different files
        string file1Data = fileCache.GetFileData("path/to/your/file1.txt");
        Console.WriteLine(file1Data);

        string file2Data = fileCache.GetFileData("path/to/your/file2.txt");
        Console.WriteLine(file2Data);

        // Manually reset cache for a specific file
        fileCache.ResetCache("path/to/your/file1.txt");


from flask import Flask, jsonify, request
import requests

app = Flask(__name__)

@app.route('/')
def home():
    return "Welcome to the Flask App!"

@app.route('/get-repo-content', methods=['GET'])
def get_repo_content():
    # Get query parameters from the request
    owner = request.args.get('owner')
    repo = request.args.get('repo')
    path = request.args.get('path')
    
    # Check if all parameters are provided
    if not all([owner, repo, path]):
        return jsonify({'error': 'Please provide owner, repo, and path parameters'}), 400
    
    # Construct the GitHub API URL
    url = f'https://api.github.com/repos/{owner}/{repo}/contents/{path}'
    
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raises an HTTPError for bad responses (4xx and 5xx)
        data = response.json()
        
        # Return the content as a JSON response
        return jsonify({
            'name': data.get('name'),
            'path': data.get('path'),
            'content': data.get('content'),  # Base64-encoded content
            'download_url': data.get('download_url')
        })
    
    except requests.exceptions.RequestException as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
