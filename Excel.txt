using System;
using System.IO;
using System.Runtime.Caching;

class FileCache
{
    private MemoryCache _cache;
    private string _filePath;
    private FileSystemWatcher _fileWatcher;

    public FileCache(string filePath)
    {
        _filePath = filePath;
        _cache = new MemoryCache("FileDataCache");

        _fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(filePath))
        {
            Filter = Path.GetFileName(filePath),
            NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName
        };

        _fileWatcher.Changed += OnFileChanged;
        _fileWatcher.Deleted += OnFileChanged;
        _fileWatcher.Renamed += OnFileChanged;
        _fileWatcher.EnableRaisingEvents = true;
    }

    private void OnFileChanged(object sender, FileSystemEventArgs e)
    {
        // Invalidate the cache if the file is changed, deleted, or renamed
        _cache.Remove(_filePath);
    }

    public string GetFileData()
    {
        if (_cache.Contains(_filePath))
        {
            return _cache.Get(_filePath) as string;
        }

        // If the cache does not contain the data, read from the file and cache it
        string data = File.ReadAllText(_filePath);
        _cache.Set(_filePath, data, new CacheItemPolicy());
        return data;
    }
}

class Program
{
    static void Main()
    {
        var fileCache = new FileCache("path/to/your/file.txt");

        // Example of usage
        string fileData = fileCache.GetFileData();
        Console.WriteLine(fileData);
    }
}
